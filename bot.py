# bot.py
# pip install -r requirements.txt
import os
import random
import asyncio
from aiohttp import web
from collections import defaultdict
from dataclasses import dataclass
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DEV_CHAT_ID = int(os.getenv("DEV_CHAT_ID", "0"))

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()


# ---- –ö–∞—Ç–∞–ª–æ–≥ ----
@dataclass(frozen=True)
class Item:
    id: str
    title: str
    price: tuple[int, int, int]  # (–ø–æ—Ü–µ–ª—É–∏, —Å–ª–æ–≤–∞, —É–∫—É—Å—ã)
    cook_time: str
    photo: str  # URL –∏–ª–∏ file_id –∏–∑ Telegram


CATALOG: list[Item] = [
    Item("karbonara", "–ö–∞—Ä–±–æ–Ω–∞—Ä–∞", (5, 2, 0), "30 –º–∏–Ω—É—Ç",
         "https://www.google.com/imgres?q=%D0%9A%D0%B0%D1%80%D0%B1%D0%BE%D0%BD%D0%B0%D1%80%D0%B0&imgurl=https%3A%2F%2Fs1.eda.ru%2FStaticContent%2FPhotos%2FUpscaled%2F150525210126%2F150601174518%2Fp_O.jpg&imgrefurl=https%3A%2F%2Feda.ru%2Frecepty%2Fpasta-picca%2Fpasta-karbonara-pasta-alla-carbonara-50865&docid=uRCBgyzGRFpRDM&tbnid=-DeFgzbx1JCe1M&vet=12ahUKEwig44LQoJKPAxV_FhAIHSyvPFgQM3oECB4QAA..i&w=2152&h=1432&hcb=2&itg=1&ved=2ahUKEwig44LQoJKPAxV_FhAIHSyvPFgQM3oECB4QAA"),
    Item("burda", "–ë—É—Ä–¥–∞", (5, 0, 2), "15 –º–∏–Ω—É—Ç",
         "https://www.google.com/imgres?q=%D1%82%D0%BE%D1%80%D1%82%D0%B8%D0%BB%D0%B8%D1%8F%20%D1%81%20%D1%8F%D0%B9%D1%86%D0%BE%D0%BC%20&imgurl=https%3A%2F%2Fimg.iamcook.ru%2F2021%2Fupl%2Frecipes%2Fcat%2Fu-49f57815779d96420b7e13365e6bf512.JPG&imgrefurl=https%3A%2F%2Fwww.iamcook.ru%2Fshowrecipe%2F26396&docid=JIonqg0SVF1bbM&tbnid=0hCaSCsiwsagvM&vet=12ahUKEwjjq43ioJKPAxXSFRAIHa0sMCkQM3oECB4QAA..i&w=600&h=450&hcb=2&ved=2ahUKEwjjq43ioJKPAxXSFRAIHa0sMCkQM3oECB4QAA"),
    Item("tea", "–ß–∞–π", (1, 1, 1), "5 –º–∏–Ω—É—Ç",
         "https://www.google.com/imgres?q=%D1%87%D0%B0%D0%B9&imgurl=https%3A%2F%2Fpasteria.com.ua%2Fimage%2Fcache%2Fcatalog%2Fblack-1500x1125.jpg&imgrefurl=https%3A%2F%2Fpasteria.com.ua%2Fchernyj-chaj&docid=3RNZ9LSGs2-CDM&tbnid=7ZRA-aa2PLs2YM&vet=12ahUKEwjNo6DtoJKPAxWNERAIHfDYPOIQM3oECBUQAA..i&w=1500&h=1125&hcb=2&ved=2ahUKEwjNo6DtoJKPAxWNERAIHfDYPOIQM3oECBUQAA"),
    Item("dumplings", "–ü–µ–ª—å–º–µ–Ω–∏ –∂–∞—Ä–µ–Ω—ã–µ(–≤ —Å–º–µ—Ç–∞–Ω–µ –∏–ª–∏ –±—É–ª—å–æ–Ω–µ)", (7, 1, 1), "25 –º–∏–Ω—É—Ç",
         "https://www.google.com/imgres?q=%D0%9F%D0%B5%D0%BB%D1%8C%D0%BC%D0%B5%D0%BD%D0%B8%20%D0%B6%D0%B0%D1%80%D0%B5%D0%BD%D1%8B%D0%B5&imgurl=https%3A%2F%2Fi.ytimg.com%2Fvi%2F5N9pV2W9h6w%2Fmaxresdefault.jpg&imgrefurl=https%3A%2F%2Fwww.russianfood.com%2Frecipes%2Frecipe.php%3Frid%3D172763&docid=rtY77aZSRId27M&tbnid=Qa7zF81zic73BM&vet=12ahUKEwj3hb-RoZKPAxU0AhAIHV8fCvwQM3oECBYQAA..i&w=1280&h=720&hcb=2&ved=2ahUKEwj3hb-RoZKPAxU0AhAIHV8fCvwQM3oECBYQAA"),
    Item("wother", "–í–æ–¥–∞", (1, 0, 1), "1 –º–∏–Ω—É—Ç–∞",
         "https://www.google.com/imgres?q=%D0%B2%D0%BE%D0%B4%D0%B0&imgurl=https%3A%2F%2Faqualife.ru%2Fupload%2Fiblock%2F230%2F230712de973388a811758eb2e6c61926.jpg&imgrefurl=https%3A%2F%2Faqualife.ru%2Fblog%2Fpitevaya_voda_pokupaem_pravilnuyu_vodu%2F%3Fsrsltid%3DAfmBOoorDOdtTLtmX3w-hMoH2xqjJ3JXxGqPVFfZ0ea4zsZRGaUCtyBl&docid=g5QbLN3EqkPuPM&tbnid=bsdbfdWzkzJyOM&vet=12ahUKEwjkp5OEoZKPAxWqGxAIHc7uJ8sQM3oECBgQAA..i&w=800&h=532&hcb=2&ved=2ahUKEwjkp5OEoZKPAxWqGxAIHc7uJ8sQM3oECBgQAA"),
    Item("Sweet and sour chicken", "–ö—É—Ä–æ—á–∫–∞ –≤ –∫–∏—Å–ª–æ-—Å–ª–∞–¥–∫–æ–º", (10, 5, 5), "45 –º–∏–Ω—É—Ç",
         "https://www.google.com/imgres?q=%D0%9A%D1%83%D1%80%D0%BE%D1%87%D0%BA%D0%B0%20%D0%B2%20%D0%BA%D0%B8%D1%81%D0%BB%D0%BE-%D1%81%D0%BB%D0%B0%D0%B4%D0%BA%D0%BE%D0%BC&imgurl=https%3A%2F%2Fimg1.russianfood.com%2Fdycontent%2Fimages_upl%2F432%2Fbig_431020.jpg&imgrefurl=https%3A%2F%2Fwww.russianfood.com%2Frecipes%2Frecipe.php%3Frid%3D157262&docid=faNZcc-_nlZ0OM&tbnid=JN2Q5jqS-q11BM&vet=12ahUKEwj9hJehoZKPAxXVHBAIHbDYBFoQM3oECCAQAA..i&w=673&h=449&hcb=2&ved=2ahUKEwj9hJehoZKPAxXVHBAIHbDYBFoQM3oECCAQAA"),
    Item("pasta whith chicken and mushrooms", "–ü–∞—Å—Ç–∞ —Å –≥—Ä–∏–±–∞–º–∏ –∏ –∫—É—Ä–∏—Ü–µ–π", (11, 6, 1), "45 –º–∏–Ω—É—Ç",
         "https://www.google.com/imgres?q=%D0%9F%D0%B0%D1%81%D1%82%D0%B0%20%D1%81%20%D0%B3%D1%80%D0%B8%D0%B1%D0%B0%D0%BC%D0%B8%20%D0%B8%20%D0%BA%D1%83%D1%80%D0%B8%D1%86%D0%B5%D0%B9&imgurl=https%3A%2F%2Fstatic.1000.menu%2Fimg%2Fcontent-v2%2F17%2Ffb%2F46067%2Fpasta-fetuchini-kurica-s-gribami-v-slivochnom-souse_1613924997_14_max.jpg&imgrefurl=https%3A%2F%2F1000.menu%2Fmeals%2F112-7896&docid=hloaAPgq8FeVJM&tbnid=L4QihozZHuOeOM&vet=12ahUKEwiYna2zoZKPAxVVFBAIHZlFJa0QM3oECCEQAA..i&w=1437&h=960&hcb=2&ved=2ahUKEwiYna2zoZKPAxVVFBAIHZlFJa0QM3oECCEQAA"),
    Item("lasagna", "–ª–∞–∑–∞–Ω—å—è", (12, 3, 4), "60 –º–∏–Ω—É—Ç",
         "https://www.google.com/imgres?q=%D0%BB%D0%B0%D0%B7%D0%B0%D0%BD%D1%8C%D1%8F&imgurl=https%3A%2F%2Fswlife.ru%2Fimage%2Fcache%2Fcatalog%2Frecipe%2F63%2F00%2F6300efa9fa984bf41f87787934cb2bcd-0x0.webp&imgrefurl=https%3A%2F%2Fswlife.ru%2Frecipes%2Flazanya&docid=KyQAt_4ZGnDO-M&tbnid=mq-GE2t7PIxKSM&vet=12ahUKEwiqvIvFoJKPAxXrQlUIHYHuOpgQM3oECBYQAA..i&w=640&h=480&hcb=2&ved=2ahUKEwiqvIvFoJKPAxXrQlUIHYHuOpgQM3oECBYQAA"),
    Item("cannelloni", "–∫–∞–Ω–∏–ª–æ–Ω–∏", (8, 2, 6), "60 –º–∏–Ω—É—Ç",
         "https://www.google.com/imgres?q=%D0%BA%D0%B0%D0%BD%D0%B8%D0%BB%D0%BE%D0%BD%D0%B8&imgurl=https%3A%2F%2Fwww.patee.ru%2Fr%2Fx6%2F16%2Fd9%2F60%2F960m.jpg&imgrefurl=https%3A%2F%2Fwww.patee.ru%2Frecipes%2Fpasta%2Fview%2F%3Fid%3D1497439&docid=t60jEgcxJzu1tM&tbnid=3jEfavocLPkWvM&vet=12ahUKEwif0LPBoZKPAxX4JxAIHU5qGv8QM3oECCoQAA..i&w=960&h=640&hcb=2&ved=2ahUKEwif0LPBoZKPAxX4JxAIHU5qGv8QM3oECCoQAA"),
    Item("vegetables", "–Ω–∞—Ä–µ–∑–∞–Ω–Ω–µ –æ–≤–æ—â–∏", (2, 0, 2), "5 –º–∏–Ω—É—Ç",
         "https://www.google.com/imgres?q=%D0%BD%D0%B0%D1%80%D0%B5%D0%B7%D0%B0%D0%BD%D0%BD%D0%B5%20%D0%BE%D0%B2%D0%BE%D1%89%D0%B8&imgurl=https%3A%2F%2Fi.ytimg.com%2Fvi%2F0y5NuEamCew%2Fhq720.jpg%3Fsqp%3D-oaymwEhCK4FEIIDSFryq4qpAxMIARUAAAAAGAElAADIQj0AgKJD%26rs%3DAOn4CLBe7KOZjZRMnyLPso1TuyPq5b3H7g&imgrefurl=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D0y5NuEamCew&docid=P6Q5XvSOhz10SM&tbnid=P31evbpWh95dSM&vet=12ahUKEwj2qtXcoZKPAxXBKBAIHUCtAqEQM3oECBwQAA..i&w=686&h=386&hcb=2&ved=2ahUKEwj2qtXcoZKPAxXBKBAIHUCtAqEQM3oECBwQAA"),
    Item("rise", "—Ä–∏—Å (–Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å)", (3, 1, 2), "30 –º–∏–Ω—É—Ç",
         "https://www.google.com/imgres?q=%D1%80%D0%B8%D1%81&imgurl=https%3A%2F%2Fs1.eda.ru%2FStaticContent%2FPhotos%2FUpscaled%2F120214140918%2F130320124922%2Fp_O.jpg&imgrefurl=https%3A%2F%2Feda.ru%2Frecepty%2Fzakuski%2Fris-na-paru-26944&docid=cWWaVvXbO0wkpM&tbnid=fsT4H1ECgfxXJM&vet=12ahUKEwjmt9XBoJqPAxV6UVUIHXMiE1IQM3oECB0QAA..i&w=1200&h=1200&hcb=2&ved=2ahUKEwjmt9XBoJqPAxV6UVUIHXMiE1IQM3oECB0QAA"),
    Item("macarons", "–º–∞–∫–∞—Ä–æ–Ω—ã", (3, 1, 2), "10 –º–∏–Ω—É—Ç",
         "https://www.google.com/imgres?q=vfrfhjys%20&imgurl=https%3A%2F%2Fkachestvorb.ru%2Fupload%2Fiblock%2F770%2Fb67ynl991s6afy8wsq7hv7ug0an3xns2.webp&imgrefurl=https%3A%2F%2Fkachestvorb.ru%2Fnews%2Fpolezny_li_makarony%2F&docid=kaR6_sx-W599uM&tbnid=71FW0bzcMqo29M&vet=12ahUKEwiYlerooJqPAxXZCRAIHVmYLeQQM3oECCIQAA..i&w=480&h=267&hcb=2&ved=2ahUKEwiYlerooJqPAxXZCRAIHVmYLeQQM3oECCIQAA"),
    Item("big bon", "big bon", (1, 0, 1), "5 –º–∏–Ω—É—Ç","https://www.google.com/imgres?q=%D0%B1%D0%B8%D0%B3%20%D0%B1%D0%BE%D0%BD&imgurl=https%3A%2F%2Fdobrodusha.ru%2Fimage%2Fcache%2Fcatalog%2Flapsha%2FLapsha-bystrogo-prigotovleniya-Big-Bon-75-g-kurica-salsa-800x800.jpg&imgrefurl=https%3A%2F%2Fdobrodusha.ru%2Fprodukty-pitaniya%2Fprodukty-bystrogo-prigotovleniya%2Flapsha-bystrogo-prigotovleniya%2Flapsha-bystrogo-prigotovleniya-big-bon-75-g-kurica-salsa%3Fsrsltid%3DAfmBOorvJlgttx-5oMWXJJcKJkLWFF5ujSiD0CulCyqbSExLyVm_CYJr&docid=LZIH-gEuUBx6WM&tbnid=cauN7GtzjCgaHM&vet=12ahUKEwiRuoKLv5qPAxUV2SoKHb2bCc4QM3oECBkQAA..i&w=800&h=800&hcb=2&ved=2ahUKEwiRuoKLv5qPAxUV2SoKHb2bCc4QM3oECBkQAA")
]

ITEM_BY_ID = {i.id: i for i in CATALOG}

# ---- –ö–æ—Ä–∑–∏–Ω—ã –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ----
carts: dict[int, dict[str, int]] = defaultdict(lambda: defaultdict(int))
last_message: dict[int, int] = {}  # user_id -> message_id


# ---- –ö–Ω–æ–ø–∫–∏ ----
def menu_kb() -> InlineKeyboardMarkup:
    rows = []
    for it in CATALOG:
        rows.append([InlineKeyboardButton(text=it.title, callback_data=f"show:{it.id}")])
    rows.append([InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart:open")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def item_kb(item_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add:{item_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="menu")]
    ])


def cart_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="menu")],
        [
            InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="cart:clear"),
            InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="cart:checkout"),
        ],
    ])


# ---- –£—Ç–∏–ª–∏—Ç—ã ----
def format_price(price: tuple[int, int, int]) -> str:
    kisses, words, bites = price
    parts = []
    if kisses: parts.append(f"{kisses} üíã")
    if words: parts.append(f"{words} üó£‚ù§Ô∏è")
    if bites: parts.append(f"{bites} üòº")
    return " + ".join(parts) if parts else "–±–µ—Å–ø–ª–∞—Ç–Ω–æ"


def cart_summary(user_id: int) -> tuple[str, tuple[int, int, int]]:
    cart = carts[user_id]
    if not cart:
        return "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", (0, 0, 0)
    lines = ["<b>–ö–æ—Ä–∑–∏–Ω–∞:</b>"]
    total = [0, 0, 0]
    for item_id, qty in cart.items():
        it = ITEM_BY_ID[item_id]
        cost = tuple(p * qty for p in it.price)
        total = [a + b for a, b in zip(total, cost)]
        lines.append(f"‚Ä¢ {it.title} √ó {qty} ‚Äî {format_price(cost)}")
    lines.append(f"\n<b>–ò—Ç–æ–≥–æ:</b> {format_price(tuple(total))}")
    return "\n".join(lines), tuple(total)


async def send_unique(user_id: int, text: str = None, photo: str = None, caption: str = None, reply_markup=None):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ"""
    # —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id in last_message:
        try:
            await bot.delete_message(user_id, last_message[user_id])
        except:
            pass
    # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
    if photo:
        msg = await bot.send_photo(user_id, photo, caption=caption, reply_markup=reply_markup)
    else:
        msg = await bot.send_message(user_id, text, reply_markup=reply_markup)
    last_message[user_id] = msg.message_id


def menu_kb() -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=it.title, callback_data=f"show:{it.id}")] for it in CATALOG]
    rows.append([
        InlineKeyboardButton(text=" –£–¥–∏–≤–∏ –º–µ–Ω—è", callback_data="random"),
        InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart:open"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)


# 3) –•—ç–Ω–¥–ª–µ—Ä ¬´–£–¥–∏–≤–∏ –º–µ–Ω—è¬ª
@dp.callback_query(F.data == "random")
async def on_random(c: CallbackQuery):
    it = random.choice(CATALOG)
    caption = f"<b>{it.title}</b>\n–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {it.cook_time}\n–¶–µ–Ω–∞: {format_price(it.price)}"
    await send_unique(
        c.from_user.id,
        photo=it.photo,
        caption=caption,
        reply_markup=item_kb(it.id)
    )
    await c.answer("–ü–æ–¥–æ–±—Ä–∞–ª–∏ –±–ª—é–¥–æ!")


# ---- –•—ç–Ω–¥–ª–µ—Ä—ã ----
@dp.message(Command("start"))
async def on_start(m: Message):
    await send_unique(
        m.from_user.id,
        text=("–¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º !"),
        reply_markup=menu_kb()
    )


@dp.callback_query(F.data == "menu")
async def on_menu(c: CallbackQuery):
    await send_unique(c.from_user.id, text="–í—ã–±–∏—Ä–∞–π –±–ª—é–¥–æ:", reply_markup=menu_kb())
    await c.answer()


@dp.callback_query(F.data.startswith("show:"))
async def on_show(c: CallbackQuery):
    item_id = c.data.split(":", 1)[1]
    item = ITEM_BY_ID[item_id]
    caption = (f"<b>{item.title}</b>\n"
               f"–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {item.cook_time}\n"
               f"–¶–µ–Ω–∞: {format_price(item.price)}")
    await send_unique(c.from_user.id, photo=item.photo, caption=caption, reply_markup=item_kb(item_id))
    await c.answer()


@dp.callback_query(F.data.startswith("add:"))
async def on_add(c: CallbackQuery):
    item_id = c.data.split(":", 1)[1]
    item = ITEM_BY_ID.get(item_id)
    if not item:
        return await c.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
    carts[c.from_user.id][item_id] += 1
    await c.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {item.title}")


@dp.callback_query(F.data == "cart:open")
async def open_cart(c: CallbackQuery):
    text, _ = cart_summary(c.from_user.id)
    await send_unique(c.from_user.id, text=text, reply_markup=cart_kb())
    await c.answer()


@dp.callback_query(F.data == "cart:clear")
async def cart_clear(c: CallbackQuery):
    carts[c.from_user.id].clear()
    await send_unique(c.from_user.id, text="–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=menu_kb())
    await c.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")


@dp.callback_query(F.data == "cart:checkout")
async def cart_checkout(c: CallbackQuery):
    text, total = cart_summary(c.from_user.id)
    if sum(total) == 0:
        return await c.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
    user = c.from_user
    order_header = (
        f"üßæ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n"
        f"–û—Ç: {user.full_name} (@{user.username or '‚Äî'}) ‚Ä¢ id={user.id}\n\n"
    )
    if DEV_CHAT_ID:
        await bot.send_message(DEV_CHAT_ID, order_header + text)
    await send_unique(
        c.from_user.id,
        text=f"{text}\n\n<b>–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b> "
             f"–° —Ç–µ–±—è {format_price(total)} üòò",
        reply_markup=menu_kb()
    )
    carts[c.from_user.id].clear()
    await c.answer("–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")


@dp.message()
async def any_text(m: Message):
    await send_unique(m.from_user.id, text="–ñ–º–∏ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –±–ª—é–¥–æ üëá", reply_markup=menu_kb())


# ---- –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ----
import datetime

QUIZ_QUESTIONS = [
    {
        "q": "–∫–∞–∫ –∑–æ–≤—É—Ç —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∫–æ—à–∫—É —è–Ω—ã",
        "options": ["—Ä—ã–∂—É—Ö–∞", "–º–µ–π –ª–∏", "–ª–∏—É"],
        "correct": "—Ä—ã–∂—É—Ö–∞"
    },
    {
        "q": "–ö—Ç–æ —Ç–∞–∫–æ–π –î–µ–Ω–∏—Å?",
        "options": ["–∫–æ—Ç", "–ü–∞—Ä–µ–Ω—å –Ø–Ω—ã", "–ö—É—Ä—å–µ—Ä –µ–¥—ã"],
        "correct": "–ü–∞—Ä–µ–Ω—å –Ø–Ω—ã"
    },
    {
        "q": "—á—Ç–æ –≤—ã–±–µ—Ä–µ—Ç —è–Ω–∞ ? ",
        "options": ["–¥–∑ –ø–æ –ª–∏–Ω–∞–ª—É", "–¥–∑ –ø–æ –º–∞—Ç–∞–Ω—É", "–¥–∑ –ø–æ –¥–∏—Å–∫—Ä–µ"],
        "correct": "–¥–∑ –ø–æ –¥–∏—Å–∫—Ä–µ"
    },
    {
        "q": "–ö–∞–∫ –Ø–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –î–µ–Ω–∏—Å—É?",
        "options": ["–° –Ω–µ–Ω–∞–≤–∏—Å—Ç—å—é üò°", "–° –ª—é–±–æ–≤—å—é ‚ù§Ô∏è", "–ö–∞–∫ –∫ —Å–æ—Å–µ–¥—É –ø–æ –∫–æ–º–Ω–∞—Ç–µ üè†"],
        "correct": "–° –ª—é–±–æ–≤—å—é ‚ù§Ô∏è"
    },
    {
        "q": "—á—Ç–æ –≤—ã–±–µ—Ä–µ—Ç —è–Ω–∞ ? ",
        "options": ["–∫–µ—Ç—á—É–ø", "–º–∞–π–æ–Ω–µ–∑", "–≥–æ—Ä—á–∏—Ç—Ü–∞"],
        "correct": "–∫–µ—Ç—á—É–ø"
    }, {
        "q": "—á—Ç–æ –≤—ã–±–µ—Ä–µ—Ç —è–Ω–∞ ? ",
        "options": ["–º–∞—Å–ª–æ –¥–ª—è –≥—É–±", "–ø–æ–º–∞–¥–∞ —Å –≥–ª—è–Ω—Ü–µ–º", "–±–ª–µ—Å–∫ –¥–ª—è –≥—É–±"],
        "correct": "–ø–æ–º–∞–¥–∞ —Å –≥–ª—è–Ω—Ü–µ–º"
    }, {
        "q": "—á—Ç–æ –≤—ã–±–µ—Ä–µ—Ç —è–Ω–∞ –≤ –º–∞–∫–∏—è–∂–µ? ",
        "options": ["–∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≥–ª–∞–∑–∞—Ö", "–∞–∫—Ü–µ–Ω—Ç –Ω–∞ –∫–æ–Ω—Ç—É—Ä–µ –ª–∏—Ü–∞", "–∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≥—É–±–∞—Ö"],
        "correct": "–∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≥—É–±–∞—Ö"
    }, {
        "q": "—á—Ç–æ –≤—ã–±–µ—Ä–µ—Ç —è–Ω–∞ ? ",
        "options": ["–±–µ–∑ –∑–∞–≤—Ç—Ä–∞–∫–∞", "—Å–ª–∞–¥–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫", "—Å–æ–ª—ë–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫"],
        "correct": "—Å–æ–ª—ë–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫"
    }, {
        "q": "–∫—É–¥–∞ –º–µ—á—Ç–∞–µ—Ç –ø–æ–ø–∞—Å—Ç—å —è–Ω–∞ (–ø–æ—Å–ª–µ –æ—á–∫–∞ –¥–µ–Ω–∏—Å–∞) ? ",
        "options": ["–ö–∏—Ç–∞–π", "–û–ê–≠", "–ò–Ω–¥–∏—è"],
        "correct": "–ö–∏—Ç–∞–π"
    }, {
        "q": "–∫—É–¥–∞ –º–µ—á—Ç–∞–µ—Ç –ø–æ–ø–∞—Å—Ç—å —è–Ω–∞ (–ø–æ—Å–ª–µ –æ—á–∫–∞ –¥–µ–Ω–∏—Å–∞) ? ",
        "options": ["–ò—Ç–∞–ª–∏—è", "–ú–æ–Ω–≥–æ–ª–∏—è", "–ë—Ä–∞–∑–∏–ª–∏—è"],
        "correct": "–ë—Ä–∞–∑–∏–ª–∏—è"
    }, {
        "q": "–ª—é–±–∏–º–∞—è –ø–µ—Å–Ω—è —è–Ω—ã —É 2rbina 2rista ",
        "options": ["–ù–∞—Ä–∫–æ—Ç–µ—Ç—Å—Ç–µ—Ä", "–ë–∞—Ä–æ–Ω —Å—É–±–±–æ—Ç–∞", "–∫–∞–ª—å—è–Ω —É –∫–∞–Ω–Ω–∏–±–∞–ª–∞"],
        "correct": "–ù–∞—Ä–∫–æ—Ç–µ—Ç—Å—Ç–µ—Ä"
    }, {
        "q": "—Å–æ —Å–∫–æ–ª–∫–∏ –ª–µ—Ç —è–Ω–∞ —Å–ª—É—à–∞–µ—Ç 2rbina 2rista?",
        "options": ["14", "12", "11"],
        "correct": "12"
    },
    {
        "q": "—è–Ω–∏–Ω–æ –ª—é–±–∏–º–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏ –Ω–≤ —Ç—Ä–∏—Ü–µ–ø—Å",
        "options": ["–ª—ë–∂–∞ —Å –≥–∏—Ä—è–º–∏ ", "–≤ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–µ —Å –∫–∞–Ω–∞—Ç–æ–º", "–≤ —É–∫–ª–æ–Ω–µ –≤–Ω–∏–∑ –≥–æ–ª–æ–≤–æ–π —Å 2–º—è –≥–∏—Ä—è–º–∏"],
        "correct": "–≤ —É–∫–ª–æ–Ω–µ –≤–Ω–∏–∑ –≥–æ–ª–æ–≤–æ–π —Å 2–º—è –≥–∏—Ä—è–º–∏"
    },
    {
        "q": "—è–Ω–∏–Ω–æ –ª—é–±–∏–º–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏ –Ω–≤ –∑–∞–¥–Ω–∏–µ –¥–µ–ª—å—Ç—ã",
        "options": ["—Ñ—É –±–ª—è—Ç—å! ", "–≤ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–µ —Å –Ω–∞–∫–ª–æ–Ω–æ–º –Ω–∞–∑–∞—Ç", "—Å –≥–∏—Ä—è–º–∏ —Å—Ç–æ—è"],
        "correct": "—Å –≥–∏—Ä—è–º–∏ —Å—Ç–æ—è"
    }, {
        "q": "–∫–∞–∫–∏–º –±—ã–ª –ø–µ—Ä–≤—ã–π –º–∞–Ω–∏–∫ —è–Ω—ã? ",
        "options": ["–∫—Ä–∞—Å–Ω—ã–π —Ñ—Ä–µ–Ω—á —Å –ø–æ–ª–æ—Å–∫–∞–º–∏", "—Ç—ë–º–Ω–æ –∑–µ–ª—ë–Ω—ã–π —Å —Å–µ—Ä–µ–º—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª–æ—Å–∫–∞–º–∏",
                    "—Å –≥–æ–ª—É–±—ã–º–∏ –ø—è—Ç–Ω–∞–º–∏ –∏ –Ω–µ—Å–∫–æ–ª—å–æ–∏–º–∏ —Ñ—É–ª –≥–æ–ª—É–±—ã–º–∏"],
        "correct": "—Å –≥–æ–ª—É–±—ã–º–∏ –ø—è—Ç–Ω–∞–º–∏ –∏ –Ω–µ—Å–∫–æ–ª—å–æ–∏–º–∏ —Ñ—É–ª –≥–æ–ª—É–±—ã–º–∏"
    }, {
        "q": "–≤–æ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç —è–Ω–∞ —Å–¥–µ–ª–∞–ª–∞ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–∞–Ω–∏–∫ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º (–∫–∞–∫ –æ–Ω–∞ —Å–µ–π—á–∞—Å –Ω–æ—Å–∏—Ç)? ",
        "options": ["14", "15", "16"],
        "correct": "15"
    }
]

user_quiz_state = {}  # user_id -> {index, correct_count, date}
quiz_results_today = {}  # user_id -> date


def quiz_kb(options, q_index):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=o, callback_data=f"quiz:{q_index}:{o}")]
        for o in options
    ])


@dp.callback_query(F.data == "quiz:start")
async def quiz_start(c: CallbackQuery):
    today = datetime.date.today()
    if quiz_results_today.get(c.from_user.id) == today:
        return await c.answer("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞–∑ –≤ –¥–µ–Ω—å!", show_alert=True)
    user_quiz_state[c.from_user.id] = {"index": 0, "correct": 0}
    q = QUIZ_QUESTIONS[0]
    await send_unique(
        c.from_user.id,
        text=f"‚ùì {q['q']}",
        reply_markup=quiz_kb(q["options"], 0)
    )
    await c.answer()


@dp.callback_query(F.data.startswith("quiz:"))
async def quiz_answer(c: CallbackQuery):
    user_id = c.from_user.id
    parts = c.data.split(":")
    q_index, choice = int(parts[1]), parts[2]
    state = user_quiz_state.get(user_id)
    if not state or state["index"] != q_index:
        return await c.answer("–°—Ç–∞—Ä—ã–π –≤–æ–ø—Ä–æ—Å", show_alert=True)

    q = QUIZ_QUESTIONS[q_index]
    if choice == q["correct"]:
        state["correct"] += 1
        await c.answer("‚úÖ –í–µ—Ä–Ω–æ!")
        # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        state["index"] += 1
        if state["index"] < len(QUIZ_QUESTIONS):
            next_q = QUIZ_QUESTIONS[state["index"]]
            await send_unique(
                user_id,
                text=f"‚ùì {next_q['q']}",
                reply_markup=quiz_kb(next_q["options"], state["index"])
            )
        else:
            today = datetime.date.today()
            quiz_results_today[user_id] = today
            del user_quiz_state[user_id]
            await send_unique(
                user_id,
                text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!"
            )
    else:
        # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Üí –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
        await c.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ!", show_alert=True)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ–π
        if DEV_CHAT_ID:
            await bot.send_message(
                DEV_CHAT_ID,
                f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{c.from_user.username or '‚Äî'} ({c.from_user.full_name}, id={user_id}) "
                f"–æ—à–∏–±—Å—è –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ.\n\n"
                f"–í–æ–ø—Ä–æ—Å: {q['q']}\n"
                f"–í—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç: {choice}\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['correct']}"
            )

        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ–Ω –∏–≥—Ä–∞–ª
        quiz_results_today[user_id] = datetime.date.today()
        if user_id in user_quiz_state:
            del user_quiz_state[user_id]

        await send_unique(
            user_id,
            text="–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ üòø –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
                ]
            )
        )


# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "üé≤ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞" –≤ –º–µ–Ω—é
def menu_kb() -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=it.title, callback_data=f"show:{it.id}")] for it in CATALOG]
    rows.append([
        InlineKeyboardButton(text=" –£–¥–∏–≤–∏ –º–µ–Ω—è", callback_data="random"),
        InlineKeyboardButton(text="üé≤ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="quiz:start"),
        InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart:open"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)


# --- –∫—Ä–æ—à–µ—á–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (health check) ---
async def _health(_):
    return web.Response(text="ok")


async def run_health_server():
    app = web.Application()
    app.router.add_get("/healthz", _health)
    port = int(os.getenv("PORT", "10000"))  # Render –ø–µ—Ä–µ–¥–∞—Å—Ç PORT
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()


if __name__ == "__main__":
    async def main():
        assert BOT_TOKEN, "BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω"
        await asyncio.gather(
            dp.start_polling(bot),  # —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç
            run_health_server(),  # HTTP /healthz
        )


    asyncio.run(main())
